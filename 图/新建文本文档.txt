void bianli(BTtree root, int deep)
{
	if (root == NULL)
		return;
	for (int i = 0; i < 50; i++)
	{
		if (map[deep][i] == 0)
		{
			map[deep][i] = root->data;
			break;
		}
		
	}
	bianli(root->lchild, deep + 1);
	bianli(root->rchild, deep + 1);
}
#include<iostream>
#include<algorithm>
#include<stack>
#include<vector>
using namespace std;
class greap
{
public:
	//输入边数
	//输入总节点数
	//对领接矩阵进行赋值
	void CinAcmnum();
	void CinVecnum();
	void CinVecter();
	void GetMap();
	int Getindex(char pos1)
	{
		for (int i = 0; i < vecnum; i++)
		{
			if (pos1 == vertex[i])
			{
				return i;
			}
		}
	}
	void InsertAcm(char posv1, char posv2);
	void printfmap();
	void dfs(char begin,char end);
	char Getchar(int i)
	{
		return vertex[i];
	}

private:
	int acrnum;
	int vecnum;
	int map[10][10] = {0};
	char vertex[10];
	int visit[10] = { 0 };
	vector<char>a;
};
int main()
{
	greap a;
	a.CinAcmnum();
	a.CinVecnum();
	a.CinVecter();
	a.GetMap();
	a.printfmap();
	a.dfs(a.Getchar(0), a.Getchar(2));






	return 0;
}

void greap::CinAcmnum()
{
	cout << "请输入边的条数";
	cin >> acrnum;
}

void greap::CinVecnum()
{
	
	cout << "请输入顶点的个数";
	cin >> vecnum;
}

void greap::CinVecter()
{
	cout << "请输入个个顶点";
	for (int i = 0; i < vecnum; i++)
	{
		cin >> vertex[i];
	}
}

void greap::GetMap()
{
	cout << "请输入变的关系";
	for (int i = 0; i < acrnum; i++)
	{
		//输入2个顶点在顶点中找
		char posv1, posv2;
		cin >> posv1 >> posv2;
		int pos1 = Getindex(posv1);
		int pos2 = Getindex(posv2);
		map[pos1][pos2] = 1;
		map[pos2][pos1] = 1;
	}
}
void greap::InsertAcm(char posv1, char posv2)
{
	int pos1 = Getindex(posv1);
	int pos2 = Getindex(posv2);
	map[pos1][pos2] = 1;
	map[pos2][pos1] = 1;
}
void greap::printfmap()
{
	for (int i = 0; i < vecnum; i++)
	{
		for (int j = 0; j < vecnum; j++)
		{
			cout << map[i][j] << "  ";
		}
		cout << endl;
	}
}

void greap::dfs(char begin,char end)
{
	visit[Getindex(begin)] = 1;
	
	if (begin == end)
	{
		a.push_back(end);
		for (int i = 0; i < a.size(); i++)
		{
			cout << a[i] << "  ";
		}
		
		return;
	}
	for (int i = vecnum-1; i >=0; i--)
	{
		if (map[Getindex(begin)][i] == 1&&visit[i]==0)
		{
			//说明有边
			a.push_back(begin);
			dfs(vertex[i], end);
			a.pop_back();
		}

	}
	visit[Getindex(begin)] = 0;
}
